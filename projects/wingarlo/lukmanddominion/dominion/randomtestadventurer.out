Function 'main'
Lines executed:100.00% of 12
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 6

File 'randomtestadventurer.c'
Lines executed:100.00% of 12
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 6
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***
        -:    2:*Logan Wingard
        -:    3:*10/31/2017 
        -:    4:*happy halloween
        -:    5:*  _
        -:    6:*|o o\ boo!
        -:    7:*| O  \
        -:    8:* \    \
        -:    9:*  `~~~'
        -:   10:*randomtestadventurer.c
        -:   11:*
        -:   12:*	Adventurer
        -:   13:*
        -:   14:*Add to make file:
        -:   15:*randomtestadventurer: randomtestadventurer.c dominion.o rngs.o
        -:   16:*      gcc -o randomtestadventurer -g  randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   17:***/
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include <string.h>
        -:   22:#include <stdio.h>
        -:   23:#include <stdlib.h>
        -:   24:#include <assert.h>
        -:   25:#include "rngs.h"
        -:   26:
function main called 1 returned 100% blocks executed 100%
        1:   27:int main(){
        -:   28:	int t, p, r;
        1:   29:	int seed = 1000;
        1:   30:	srand(seed);
call    0 returned 1
        1:   31:	int numPlayer = (rand()%3)+2;//2-4 players
call    0 returned 1
        -:   32:	struct gameState G;
        1:   33:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   34:			   , remodel, smithy, village, baron, great_hall};
        -:   35:			   
     2001:   36:	for(t=0;t<2000;t++){
branch  0 taken 2000
branch  1 taken 1 (fallthrough)
     2000:   37:		memset(&G, 23, sizeof(struct gameState));   // clear the game state
     2000:   38:		r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 2000
     2000:   39:		p = rand()%numPlayer; //choses random player
call    0 returned 2000
     2000:   40:		playAdventurer(&G);
call    0 returned 2000
        -:   41:	}
        1:   42:	printf("Code did not break");
call    0 returned 1
        -:   43:	
        1:   44:	return 0;
        -:   45:}
Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:4.39% of 205
Branches executed:12.85% of 179
Taken at least once:2.23% of 179
Calls executed:5.17% of 58

Function 'playCouncilRoom'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'playGreatHall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 19
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 3

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:23.33% of 30
Branches executed:100.00% of 28
Taken at least once:17.86% of 28
No calls

Function 'drawCard'
Lines executed:95.45% of 22
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:71.43% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:80.00% of 10
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'endTurn'
Lines executed:100.00% of 20
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:76.92% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:47.14% of 560
Branches executed:53.00% of 417
Taken at least once:36.21% of 417
Calls executed:32.29% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 300957 returned 100% blocks executed 100%
   300957:    8:int compare(const void* a, const void* b) {
   300957:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 228 (fallthrough)
branch  1 taken 300729
      228:   10:    return 1;
   300729:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 80215 (fallthrough)
branch  1 taken 220514
    80215:   12:    return -1;
   220514:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6016 returned 100% blocks executed 95%
     6016:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6016:   44:  SelectStream(1);
call    0 returned 6016
     6016:   45:  PutSeed((long)randomSeed);
call    0 returned 6016
        -:   46:  
        -:   47:  //check number of players
     6016:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 6016 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6016
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     6016:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    66176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 60160
branch  1 taken 6016 (fallthrough)
        -:   58:    {
   661760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 601600
branch  1 taken 60160 (fallthrough)
        -:   60:        {
   601600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 541440 (fallthrough)
branch  1 taken 60160
branch  2 taken 0 (fallthrough)
branch  3 taken 541440
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     6016:   73:  if (numPlayers == 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 6000
        -:   74:    {
       16:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     6000:   77:  else if (numPlayers == 3)
branch  0 taken 4000 (fallthrough)
branch  1 taken 2000
        -:   78:    {
     4000:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     2000:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     6016:   87:  if (numPlayers == 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 6000
        -:   88:    {
       16:   89:      state->supplyCount[estate] = 8;
       16:   90:      state->supplyCount[duchy] = 8;
       16:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     6000:   95:      state->supplyCount[estate] = 12;
     6000:   96:      state->supplyCount[duchy] = 12;
     6000:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     6016:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     6016:  102:  state->supplyCount[silver] = 40;
     6016:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   126336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 120320
branch  1 taken 6016 (fallthrough)
        -:  107:    {
   992640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 932480
branch  1 taken 60160 (fallthrough)
        -:  109:	{
   932480:  110:	  if (kingdomCards[j] == i)
branch  0 taken 60160 (fallthrough)
branch  1 taken 872320
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    60160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 54145 (fallthrough)
branch  1 taken 6015
branch  2 taken 6016 (fallthrough)
branch  3 taken 48129
        -:  114:		{
    24062:  115:		  if (numPlayers == 2){ 
branch  0 taken 31 (fallthrough)
branch  1 taken 12000
       31:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    12000:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    48129:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    60160:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   872320:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26048:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 20032
branch  1 taken 6016 (fallthrough)
        -:  139:    {
    20032:  140:      state->deckCount[i] = 0;
    80128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 60096
branch  1 taken 20032 (fallthrough)
        -:  142:	{
    60096:  143:	  state->deck[i][j] = estate;
    60096:  144:	  state->deckCount[i]++;
        -:  145:	}
   160256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 140224
branch  1 taken 20032 (fallthrough)
        -:  147:	{
   140224:  148:	  state->deck[i][j] = copper;
   140224:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26048:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 20032
branch  1 taken 6016 (fallthrough)
        -:  155:    {
    20032:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 20032
branch  1 taken 0 (fallthrough)
branch  2 taken 20032
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26048:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 20032
branch  1 taken 6016 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    20032:  166:      state->handCount[i] = 0;
    20032:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   168448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 162432
branch  1 taken 6016 (fallthrough)
        -:  177:    {
   162432:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     6016:  182:  state->outpostPlayed = 0;
     6016:  183:  state->phase = 0;
     6016:  184:  state->numActions = 1;
     6016:  185:  state->numBuys = 1;
     6016:  186:  state->playedCardCount = 0;
     6016:  187:  state->whoseTurn = 0;
     6016:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    36096:  192:  for (it = 0; it < 5; it++){
branch  0 taken 30080
branch  1 taken 6016 (fallthrough)
    30080:  193:    drawCard(state->whoseTurn, state);
call    0 returned 30080
        -:  194:  }
        -:  195:
     6016:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 6016
        -:  197:
     6016:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 20048 returned 100% blocks executed 100%
    20048:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    20048:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    20048:  209:  if (state->deckCount[player] < 1)
branch  0 taken 3 (fallthrough)
branch  1 taken 20045
        3:  210:    return -1;
    20045:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 20045
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   240588:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 200498
branch  1 taken 20045 (fallthrough)
   200498:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 200498
   200498:  216:    newDeck[newDeckPos] = state->deck[player][card];
   200498:  217:    newDeckPos++;
   651819:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 451321
branch  1 taken 200498 (fallthrough)
   451321:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   200498:  221:    state->deckCount[player]--;
        -:  222:  }
   220543:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 200498
branch  1 taken 20045 (fallthrough)
   200498:  224:    state->deck[player][i] = newDeck[i];
   200498:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    20045:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 56 returned 100% blocks executed 80%
       56:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       56:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       56:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 56
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       56:  243:  if ( state->numActions < 1 )
branch  0 taken 48 (fallthrough)
branch  1 taken 8
        -:  244:    {
       48:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        8:  249:  card = handCard(handPos, state);
call    0 returned 8
        -:  250:	
        -:  251:  //check if selected card is an action
        8:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        8:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        8:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        8:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 8
        -:  268:	
        8:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 29 returned 100% blocks executed 79%
       29:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       29:  280:  who = state->whoseTurn;
        -:  281:
       29:  282:  if (state->numBuys < 1){
branch  0 taken 0 (fallthrough)
branch  1 taken 29
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       29:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 29
branch  1 taken 0 (fallthrough)
branch  2 taken 29
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       29:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 29
branch  1 taken 0 (fallthrough)
branch  2 taken 29
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       29:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       29:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 29
        -:  298:  
       29:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 29
       29:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       29:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 252 returned 100% blocks executed 100%
      252:  311:int numHandCards(struct gameState *state) {
      252:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 252
        -:  313:}
        -:  314:
function handCard called 487 returned 100% blocks executed 100%
      487:  315:int handCard(int handPos, struct gameState *state) {
      487:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 487
      487:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 88 returned 100% blocks executed 100%
       88:  320:int supplyCount(int card, struct gameState *state) {
       88:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2813 returned 100% blocks executed 100%
     2813:  346:int whoseTurn(struct gameState *state) {
     2813:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 30 returned 100% blocks executed 100%
       30:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       30:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 30
        -:  354:  
        -:  355:  //Discard hand
      204:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 174
branch  1 taken 30 (fallthrough)
      174:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      174:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       30:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       30:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 15 (fallthrough)
branch  1 taken 15
       15:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       15:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       30:  370:  state->outpostPlayed = 0;
       30:  371:  state->phase = 0;
       30:  372:  state->numActions = 1;
       30:  373:  state->coins = 0;
       30:  374:  state->numBuys = 1;
       30:  375:  state->playedCardCount = 0;
       30:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      180:  380:  for (k = 0; k < 5; k++){
branch  0 taken 150
branch  1 taken 30 (fallthrough)
      150:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 150
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       30:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 30
        -:  386:
       30:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 31 returned 100% blocks executed 82%
       31:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       31:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 30
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       30:  401:  j = 0;
      780:  402:  for (i = 0; i < 25; i++)
branch  0 taken 750
branch  1 taken 30 (fallthrough)
        -:  403:    {
      750:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 750
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
       30:  409:  if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       30:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 70%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       35:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 33
branch  1 taken 2 (fallthrough)
        -:  434:    {
       33:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
       33:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 30
       33:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
       33:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 8 (fallthrough)
branch  1 taken 25
       33:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
       33:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       35:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 33
branch  1 taken 2 (fallthrough)
        -:  445:    {
       33:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 30
       33:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 29
       33:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
       33:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 3 (fallthrough)
branch  1 taken 30
       33:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
       33:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 33
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 46264 returned 100% blocks executed 92%
    46264:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    46264:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 13 (fallthrough)
branch  1 taken 46251
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      191:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 178
branch  1 taken 13 (fallthrough)
      178:  534:      state->deck[player][i] = state->discard[player][i];
      178:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       13:  538:    state->deckCount[player] = state->discardCount[player];
       13:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       13:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 13
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       13:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       13:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       13:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       13:  559:    if (deckCounter == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####:  560:      return -1;
        -:  561:
       13:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       13:  563:    state->deckCount[player]--;
       13:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    46251:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    46251:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    46251:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    46251:  576:    state->deckCount[player]--;
    46251:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    46264:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 58 returned 100% blocks executed 23%
       58:  583:int getCost(int cardNumber)
        -:  584:{
       58:  585:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 16
branch  4 taken 0
branch  5 taken 22
branch  6 taken 12
branch  7 taken 4
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 4
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       16:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       22:  598:      return 3;
        -:  599:    case gold:
       12:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Refactored cards-assignment2
function playSmithy called 2002 returned 100% blocks executed 100%
     2002:  647:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  648:{
        -:  649:  int i;
        -:  650:  // +3 cards
    10010:  651:  for(i = 0; i < 4; i++)		//Introduced bug i < 4, so the player would draw 4 cards, instead of i < 3
branch  0 taken 8008
branch  1 taken 2002 (fallthrough)
     8008:  652:	  drawCard(currentPlayer, state);
call    0 returned 8008
        -:  653:  //put played cards in discard pile
     2002:  654:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2002
     2002:  655:  return 0;
        -:  656:}
        -:  657:
function playAdventurer called 2006 returned 100% blocks executed 100%
     2006:  658:int playAdventurer(struct gameState *state)
        -:  659:{
     2006:  660:   int drawntreasure = 0;
     2006:  661:   int currentPlayer = whoseTurn(state);
call    0 returned 2006
        -:  662:   int temphand[MAX_HAND];
     2006:  663:   int z = 0;
    10038:  664:   while(drawntreasure <= 2){			//Introduced bugs so the player draw 3 cards, instead of <2
branch  0 taken 6026
branch  1 taken 2006 (fallthrough)
     6026:  665:	   if(state->deckCount[currentPlayer] < 1)
branch  0 taken 3 (fallthrough)
branch  1 taken 6023
        3:  666:		   shuffle(currentPlayer, state); 	//if deck empty, shuffle discard pile and become the deck
call    0 returned 3
     6026:  667:	   drawCard(currentPlayer, state);
call    0 returned 6026
     6026:  668:	   int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];		//recently drawn cards
     6026:  669:	   if(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 18 (fallthrough)
branch  1 taken 6008
branch  2 taken 12 (fallthrough)
branch  3 taken 6
branch  4 taken 4 (fallthrough)
branch  5 taken 8
     6018:  670:		   drawntreasure++;
     6018:  671:		   state->coins++;
        -:  672:	   }
        -:  673:	   else{
        8:  674:		   temphand[z] = cardDrawn;
        8:  675:		   state->handCount[currentPlayer]--;		//remove the most recent drawn cards
        8:  676:		   z++;
        -:  677:	   }
        -:  678:   }
     4020:  679:   while(z-1 >= 0){
branch  0 taken 8
branch  1 taken 2006 (fallthrough)
        8:  680:	   state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];		//discard cards in play that has been drawn
        8:  681:	   z--;
        -:  682:   }
     2006:  683:   return 0;
        -:  684:}
        -:  685:	
function playGreatHall called 0 returned 0% blocks executed 0%
    #####:  686:int playGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -:  687:{
        -:  688:   //+1 card
    #####:  689:   drawCard(currentPlayer, state);
call    0 never executed
        -:  690:   
        -:  691:   //+1 action
    #####:  692:   state->numActions++;
        -:  693:	
        -:  694:   //put played cards in discard pile
    #####:  695:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  696:   return 0;
        -:  697:}
        -:  698:	
function playVillage called 2000 returned 100% blocks executed 100%
     2000:  699:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  700:{
        -:  701:   //+1 card
     2000:  702:   drawCard(currentPlayer, state);
call    0 returned 2000
        -:  703:   
        -:  704:   //+2 action
     2000:  705:   state->numActions = state->numActions + 2;
        -:  706:	
        -:  707:   //put played cards in discard pile
     2000:  708:   discardCard(handPos, currentPlayer, state, 1);	//introduce bugs, where the value of trashflag is 1 instead of 0
call    0 returned 2000
     2000:  709:   return 0;
        -:  710:}
        -:  711:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  712:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos)
        -:  713:{
        -:  714:   int i;
        -:  715:   // +4 cards
    #####:  716:   for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
    #####:  717:	   drawCard(currentPlayer, state);
call    0 never executed
        -:  718:   
        -:  719:   // +1 buy
    #####:  720:   state->numBuys++;
        -:  721:
        -:  722:   //each player draw 1 card
    #####:  723:   for(i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
    #####:  724:	   if(i = currentPlayer)			//introduce bugs that when i = current, draw card, instead of i !=
branch  0 never executed
branch  1 never executed
    #####:  725:		   drawCard(i, state);
call    0 never executed
        -:  726:
        -:  727:   //put played cards in discard pile
    #####:  728:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  729:   return 0;
        -:  730:}
        -:  731:
function cardEffect called 8 returned 100% blocks executed 3%
        8:  732:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  733:{
        -:  734:  int i;
        -:  735:  int j;
        -:  736:  int k;
        -:  737:  int x;
        -:  738:  int index;
        8:  739:  int currentPlayer = whoseTurn(state);
call    0 returned 8
        8:  740:  int nextPlayer = currentPlayer + 1;
        -:  741:
        8:  742:  int tributeRevealedCards[2] = {-1, -1};
        -:  743:  int temphand[MAX_HAND];// moved above the if statement
        8:  744:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        6:  745:    nextPlayer = 0;
        -:  746:  }
        -:  747:  
        -:  748:	
        -:  749:  //uses switch to select card and perform actions
        8:  750:  switch( card ) 
branch  0 taken 6
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 2
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  751:    {
        -:  752:    case adventurer:
        6:  753:      return playAdventurer(state);
call    0 returned 6
        -:  754:			
        -:  755:    case council_room:
    #####:  756:      return playCouncilRoom(state, currentPlayer, handPos);
call    0 never executed
        -:  757:     
        -:  758:			
        -:  759:    case feast:
        -:  760:      //gain card with cost up to 5
        -:  761:      //Backup hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  764:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  765:      }
        -:  766:      //Backup hand
        -:  767:
        -:  768:      //Update Coins for Buy
    #####:  769:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  770:      x = 1;//Condition to loop on
    #####:  771:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  772:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:	  if (DEBUG)
        -:  774:	    printf("None of that card left, sorry!\n");
        -:  775:
        -:  776:	  if (DEBUG){
        -:  777:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  778:	  }
        -:  779:	}
    #####:  780:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  782:
        -:  783:	  if (DEBUG){
        -:  784:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  785:	  }
        -:  786:	}
        -:  787:	else{
        -:  788:
        -:  789:	  if (DEBUG){
        -:  790:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:	  }
        -:  792:
    #####:  793:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  794:	  x = 0;//No more buying cards
        -:  795:
        -:  796:	  if (DEBUG){
        -:  797:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  798:	  }
        -:  799:
        -:  800:	}
        -:  801:      }     
        -:  802:
        -:  803:      //Reset Hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	state->hand[currentPlayer][i] = temphand[i];
    #####:  806:	temphand[i] = -1;
        -:  807:      }
        -:  808:      //Reset Hand
        -:  809:      			
    #####:  810:      return 0;
        -:  811:			
        -:  812:    case gardens:
    #####:  813:      return -1;
        -:  814:			
        -:  815:    case mine:
    #####:  816:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  817:
    #####:  818:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:		
    #####:  823:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:
    #####:  833:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  834:
        -:  835:      //discard card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  837:
        -:  838:      //discard trashed card
    #####:  839:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  840:	{
    #####:  841:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  842:	    {
    #####:  843:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  844:	      break;
        -:  845:	    }
        -:  846:	}
        -:  847:			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case remodel:
    #####:  851:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:
    #####:  853:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  859:
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  862:
        -:  863:      //discard trashed card
    #####:  864:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  865:	{
    #####:  866:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  867:	    {
    #####:  868:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  869:	      break;
        -:  870:	    }
        -:  871:	}
        -:  872:
        -:  873:
    #####:  874:      return 0;
        -:  875:		
        -:  876:    case smithy:
        2:  877:      return playSmithy(state, currentPlayer, handPos);
call    0 returned 2
        -:  878:      
        -:  879:		
        -:  880:    case village:
    #####:  881:      return playVillage(state, currentPlayer, handPos);
call    0 never executed
        -:  882:		  
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
    #####:  935:      return playGreatHall(state, currentPlayer, handPos);
call    0 never executed
        -:  936:		
        -:  937:    case minion:
        -:  938:      //+1 action
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  943:			
    #####:  944:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  state->coins = state->coins + 2;
        -:  947:	}
        -:  948:			
    #####:  949:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  950:	{
        -:  951:	  //discard hand
    #####:  952:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  953:	    {
    #####:  954:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  955:	    }
        -:  956:				
        -:  957:	  //draw 4
    #####:  958:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  959:	    {
    #####:  960:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  961:	    }
        -:  962:				
        -:  963:	  //other players discard hand and redraw if hand size > 4
    #####:  964:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  965:	    {
    #####:  966:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  967:		{
    #####:  968:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  969:		    {
        -:  970:		      //discard hand
    #####:  971:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  972:			{
    #####:  973:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  974:			}
        -:  975:							
        -:  976:		      //draw 4
    #####:  977:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  978:			{
    #####:  979:			  drawCard(i, state);
call    0 never executed
        -:  980:			}
        -:  981:		    }
        -:  982:		}
        -:  983:	    }
        -:  984:				
        -:  985:	}
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case steward:
    #####:  989:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  990:	{
        -:  991:	  //+2 cards
    #####:  992:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  993:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  994:	}
    #####:  995:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  996:	{
        -:  997:	  //+2 coins
    #####:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:      else
        -: 1001:	{
        -: 1002:	  //trash 2 cards in hand
    #####: 1003:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1004:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1005:	}
        -: 1006:			
        -: 1007:      //discard card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:		
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
        -: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:	    
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:			    
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	} 
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }    
        -: 1047:		       
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:		    
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:	    
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;				
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
        -: 1095:      if (DEBUG) 
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:			
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}			
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:		
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
        -: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}	
    #####: 1149:		      break;
        -: 1150:		    }		
        -: 1151:		}
        -: 1152:					
        -: 1153:	    }
        -: 1154:				
        -: 1155:	}				
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:		
        -: 1163:    case embargo: 
        -: 1164:      //+2 Coins
    #####: 1165:      state->coins = state->coins + 2;
        -: 1166:			
        -: 1167:      //see if selected pile is in play
    #####: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  return -1;
        -: 1171:	}
        -: 1172:			
        -: 1173:      //add embargo token to selected supply pile
    #####: 1174:      state->embargoTokens[choice1]++;
        -: 1175:			
        -: 1176:      //trash card
    #####: 1177:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:			
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:			
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1198:	}
        -: 1199:			
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:				
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:			
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:	
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 4002 returned 100% blocks executed 89%
     4002: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:	
        -: 1251:  //if card is not trashed, added to Played pile 
     4002: 1252:  if (trashFlag < 1)
branch  0 taken 2002 (fallthrough)
branch  1 taken 2000
        -: 1253:    {
        -: 1254:      //add card to played pile
     2002: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2002: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //set played card to -1
     4002: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:	
        -: 1262:  //remove card from player's hand
     4002: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1326 (fallthrough)
branch  1 taken 2676
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
     1326: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
     2676: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 2676
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else 	
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
     2676: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
     2676: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
     2676: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:	
     4002: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 59 returned 100% blocks executed 90%
       59: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:	
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       59: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 59
branch  1 taken 0 (fallthrough)
branch  2 taken 59
        -: 1292:    {
    #####: 1293:      return -1;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
       59: 1301:  if (toFlag == 1)
branch  0 taken 10 (fallthrough)
branch  1 taken 49
        -: 1302:    {
       10: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       10: 1304:      state->deckCount[player]++;
        -: 1305:    }
       49: 1306:  else if (toFlag == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 39
        -: 1307:    {
       10: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       10: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
       39: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       39: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //decrease number in supply pile
       59: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:	 
       59: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 6054 returned 100% blocks executed 100%
     6054: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:	
        -: 1327:  //reset coin count
     6054: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
    36348: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 30294
branch  1 taken 6054 (fallthrough)
        -: 1332:    {
    30294: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 22166 (fallthrough)
branch  1 taken 8128
        -: 1334:	{
    22166: 1335:	  state->coins += 1;
        -: 1336:	}
     8128: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 40 (fallthrough)
branch  1 taken 8088
        -: 1338:	{
       40: 1339:	  state->coins += 2;
        -: 1340:	}
     8088: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 14 (fallthrough)
branch  1 taken 8074
        -: 1342:	{
       14: 1343:	  state->coins += 3;
        -: 1344:	}	
        -: 1345:    }	
        -: 1346:
        -: 1347:  //add bonus
     6054: 1348:  state->coins += bonus;
        -: 1349:
     6054: 1350:  return 0;
        -: 1351:}
        -: 1352:
        -: 1353:
        -: 1354://end of dominion.c
        -: 1355:
